@SomeDirectory\TestClass.cs

using Avensia;
using Newtonsoft.Json;
namespace Test {
    [GenerateTypeScriptTypeMember]
    [GenerateTypeScriptDefinition]
    public class TestClass1 {
        public int Prop1 { get; set; }
    }

    [GenerateTypeScriptTypeMember("TheTypeOfThis")]
    [GenerateTypeScriptDefinition]
    public class TestClass2 {
        public int Prop1 { get; set; }
    }

    [GenerateTypeScriptTypeMember]
    [GenerateTypeScriptDefinition]
    public abstract class TestBase {
        public int Prop1 { get; set; }
    }

    [GenerateTypeScriptDefinition]
    public class TestClass3 : TestBase {
        public int Prop2 { get; set; }
    }
}

--------------------------------------------
@SomeDirectory\TestClass1.type.ts

interface TestClass1 {
  $type: 'TestClass1';
  prop1: number;
}

export default TestClass1;

--------------------------------------------
@SomeDirectory\TestClass2.type.ts

interface TestClass2 {
  TheTypeOfThis: 'TestClass2';
  prop1: number;
}

export default TestClass2;

--------------------------------------------
@SomeDirectory\TestBase.type.ts

interface TestBase {
  prop1: number;
}

export default TestBase;

--------------------------------------------
@SomeDirectory\TestClass3.type.ts

import TestBase from './TestBase.type';

interface TestClass3 extends TestBase {
  $type: 'TestClass3';
  prop2: number;
}

export default TestClass3;

