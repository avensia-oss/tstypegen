@SomeDirectory\TestClass.cs

using System.Collections.Generic;
using Avensia;
using Newtonsoft.Json;
namespace Test {
    [GenerateTypeScriptDerivedTypesUnion]
    [GenerateTypeScriptDefinition]
    public abstract class TestBase {
        public int Prop1 { get; set; }
    }

    [GenerateTypeScriptDefinition]
    public class TestClass1 : TestBase {
        public int Prop2 { get; set; }
    }

    [GenerateTypeScriptDefinition]
    public class TestClass2 : TestBase {
        public int Prop3 { get; set; }
    }

    [GenerateTypeScriptDefinition]
    public class MainTestClass {
        public TestBase Prop1 { get; set; }
        public List<TestBase> Prop2 { get; set; }
        public TestBase[] Prop3 { get; set; }
        public Dictionary<string, TestBase> Prop4 { get; set; }
    }
}

--------------------------------------------
@SomeDirectory\TestBase.type.ts

import TestClass1 from './TestClass1.type';
import TestClass2 from './TestClass2.type';

interface TestBase {
  prop1: number;
}

type TestBaseTypes = TestClass1 | TestClass2;

export TestBaseTypes;

export default TestBase;

--------------------------------------------
@SomeDirectory\TestClass1.type.ts

import TestBase from './TestBase.type';

interface TestClass1 extends TestBase {
  prop2: number;
}

export default TestClass1;

--------------------------------------------
@SomeDirectory\TestClass2.type.ts

import TestBase from './TestBase.type';

interface TestClass2 extends TestBase {
  prop3: number;
}

export default TestClass2;

--------------------------------------------
@SomeDirectory\MainTestClass.type.ts

import { TestBaseTypes } from './TestBase.type';

interface MainTestClass {
  prop1: TestBaseTypes;
  prop2: TestBaseTypes[];
  prop3: TestBaseTypes[];
  prop4: {[item: string]: TestBaseTypes};
}

export default MainTestClass;
