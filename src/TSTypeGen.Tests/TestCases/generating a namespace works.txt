@SomeDirectory\TestClass.cs

using Avensia;
using System.Collections.Generic;
using Test2;
[assembly: GenerateTypeScriptNamespace("test")]
namespace Test {
    [GenerateTypeScriptDefinition]
    public class TestClass1 : TestClass2 {
        public int Prop1 { get; set; }
        public TestClass2 Prop2 { get; set; }
        public TestClass3<int> Prop3 { get; set; }
    }

    [GenerateTypeScriptDefinition]
    public class TestClass2 : TestClass3<TestEnum1> {
        public IEnumerable<int> Prop1 { get; set; }
        public IEnumerable<TestClass2> Prop2 { get; set; }
        public IDictionary<string, TestClass3<string>> Prop3 { get; set; }
    }
}

--------------------------------------------
@SomeDirectory\TestClass3.cs

using Avensia;
using Test;
namespace Test2 {
    [GenerateTypeScriptDefinition]
    public class TestClass3<T> {
        public int Prop1 { get; set; }
        public TestClass2 Prop2 { get; set; }
        public TestClass3<string> Prop3 { get; set; }
    }

    [GenerateTypeScriptDefinition]
    public enum TestEnum1 {
        Value1,
        Value2,
        Value3,
    }
}

--------------------------------------------
@test.d.ts

declare namespace test {
  interface TestClass1 extends TestClass2 {
    prop1: number;
    prop2: TestClass2;
    prop3: TestClass3<number>;
  }

  interface TestClass2 extends TestClass3<TestEnum1> {
    prop1: number[];
    prop2: TestClass2[];
    prop3: {[item: string]: TestClass3<string>};
  }

  interface TestClass3<T> {
    prop1: number;
    prop2: TestClass2;
    prop3: TestClass3<string>;
  }

  const enum TestEnum1 {
    Value1 = 'value1',
    Value2 = 'value2',
    Value3 = 'value3',
  }
}
