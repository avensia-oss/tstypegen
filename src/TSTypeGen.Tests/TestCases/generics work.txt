@SomeDirectory\TestClass.cs

using Avensia;
using Newtonsoft.Json;
namespace Test {
    [GenerateTypeScriptDefinition]
    public class TestBase<T> {
        public int Prop1 { get; set; }
    }

    [GenerateTypeScriptDefinition]
    public class TestClass1<T1, T2> {
    }

    [GenerateTypeScriptDefinition]
    public class TestClass2 {
    }

    [GenerateTypeScriptDefinition]
    public interface ITest1<T1, T2> {
        T1 Prop1 { get; set; }
    }

    [GenerateTypeScriptDefinition]
    public interface ITest2<T> : ITest1<int, T> {
    }

    [GenerateTypeScriptDefinition]
    public class TestBase<T> {
    }

    [GenerateTypeScriptDefinition]
    public class TestClass3<T> : TestBase<ITest1<int, ITest2<T>>> {
    }

    [GenerateTypeScriptDefinition]
    public class TestClass4 {
        public ITest1<TestClass1<TestClass2, string>, TestClass3<ITest2<TestClass3<string>>>> Prop1 { get; set; }
    }
}

--------------------------------------------
@SomeDirectory\TestBase.type.ts

interface TestBase<T> {
  prop1: number;
}

export default TestBase;

--------------------------------------------
@SomeDirectory\ITest1.type.ts

interface ITest1<T1, T2> {
  prop1: T1;
}

export default ITest1;

--------------------------------------------
@SomeDirectory\ITest2.type.ts

import ITest1 from './ITest1.type';

interface ITest2<T> extends ITest1<number, T> {
}

export default ITest2;

--------------------------------------------
@SomeDirectory\TestClass1.type.ts

interface TestClass1<T1, T2> {
}

export default TestClass1;

--------------------------------------------
@SomeDirectory\TestClass2.type.ts

interface TestClass2 {
}

export default TestClass2;

--------------------------------------------
@SomeDirectory\TestClass3.type.ts

import ITest1 from './ITest1.type';
import ITest2 from './ITest2.type';
import TestBase from './TestBase.type';

interface TestClass3<T> extends TestBase<ITest1<number, ITest2<T>>> {
}

export default TestClass3;

--------------------------------------------
@SomeDirectory\TestClass4.type.ts

import ITest1 from './ITest1.type';
import ITest2 from './ITest2.type';
import TestClass1 from './TestClass1.type';
import TestClass2 from './TestClass2.type';
import TestClass3 from './TestClass3.type';

interface TestClass4 {
  prop1: ITest1<TestClass1<TestClass2, string>, TestClass3<ITest2<TestClass3<string>>>>;
}

export default TestClass4;
