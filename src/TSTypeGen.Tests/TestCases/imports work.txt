@SomeDirectory\TestClass1.cs

using Avensia;
using Newtonsoft.Json;
using System.Collections.Generic;
namespace Test {
    [GenerateTypeScriptDefinition]
    public class TestClass1 {
        public TestClass1 Prop1 { get; set; }
        public TestClass2 Prop2 { get; set; }
        public TestClass3 Prop3 { get; set; }
        public TestClass3.InnerClass Prop4 { get; set; }
    }

    [GenerateTypeScriptDefinition]
    public class TestClass2 {
        public Dictionary<string, TestClass1> Prop1 { get; set; }
        public TestClass3[] Prop2 { get; set; }
    }
}

--------------------------------------------
@SomeOtherDirectory\TestClass2.cs

using Avensia;
using Newtonsoft.Json;
namespace Test {
    [GenerateTypeScriptDefinition]
    public class TestClass3 {
        public class InnerClass {
        }
    }
}

--------------------------------------------
@SomeDirectory\TestClass1.type.ts

import InnerClass from '../SomeOtherDirectory/TestClass3+InnerClass.type';
import TestClass2 from './TestClass2.type';
import TestClass3 from '../SomeOtherDirectory/TestClass3.type';

interface TestClass1 {
  prop1: TestClass1;
  prop2: TestClass2;
  prop3: TestClass3;
  prop4: InnerClass;
}

export default TestClass1;

--------------------------------------------
@SomeDirectory\TestClass2.type.ts

import TestClass1 from './TestClass1.type';
import TestClass3 from '../SomeOtherDirectory/TestClass3.type';

interface TestClass2 {
  prop1: {[item: string]: TestClass1};
  prop2: TestClass3[];
}

export default TestClass2;

--------------------------------------------
@SomeOtherDirectory\TestClass3.type.ts

interface TestClass3 {
}

export default TestClass3;

--------------------------------------------
@SomeOtherDirectory\TestClass3+InnerClass.type.ts

interface InnerClass {
}

export default InnerClass;
